---
- name: Deploy Podman Media Stack with Systemd User Units (uCore Compatible)
  hosts: 192.168.50.182 # <-- CHANGE THIS
  gather_facts: yes
  # 'become' is needed for user creation, linger, but not most file operations if done in user home
  # We will use become_user for tasks specifically needing the podman_user context

  vars:
    # --- Core Setup ---
    podman_user: "alastor" # CHANGE THIS if needed
    podman_group: "alastor" # CHANGE THIS if needed (often same as user)
    # Store stacks and data within the user's home directory
    user_home_dir: "/var/home/{{ podman_user }}" # Use /var/home for ostree systems, check if /home is symlinked
    base_stack_dir: "{{ user_home_dir }}/podman-stacks"
    base_data_dir: "{{ user_home_dir }}/podman-data"
    user_puid: "1001" # CHANGE THIS (match podman_user's actual UID)
    user_pgid: "1001" # CHANGE THIS (match podman_user's actual GID)
    timezone: "America/New_York" # CHANGE THIS

    # --- Gluetun ---
    vpn_provider: "nordvpn" # CHANGE THIS
    vpn_type: "wireguard" # or openvpn

    # --- Ports (Informational - Firewall not managed here) ---
    endlessh_port: 2222
    portainer_https_port: 9443 # Example: Access via http://<host-ip>:9443

    # --- Secrets (USE ANSIBLE VAULT!) ---
    authelia_session_secret: "{{ authelia_session_secret }}"
    authelia_jwt_secret: "{{ authelia_jwt_secret }}"
    authelia_storage_encryption_key: "{{ authelia_storage_encryption_key }}"
    vault_ionos_api_key: "{{ vault_ionos_api_key }}"

    # --- Tokens ---
    gotify_app_token: "CHANGE_ME_GET_FROM_GOTIFY_UI"

    # --- Service Lists ---
    # (Service lists remain the same as original playbook) 
    podman_services:
      - jellyfin
      - stash
      - dozzle
      - crowdsec
      - caddy
      - diun
      - scrutiny
      - uptime-kuma
      - jellyseerr
      - infra # Placeholder
      - gluetun
      - radarr
      - sonarr
      - lidarr
      - prowlarr
      - homepage
      - changedetection
      - unbound
      - godns
      - jackett
      - flaresolverr
      - endlessh
      - qbittorrent
      - sabnzbd
      # - borgmatic # Ensure compose file handles volumes correctly if enabled
      - authelia
      - gotify
      - portainer

    services_with_data_dirs: # Relative paths under base_data_dir
      - jellyfin/config
      - jellyfin/cache
      - jellyfin/media
      - stash/config
      - stash/generated
      - stash/metadata
      - stash/cache
      - stash/blobs
      - dozzle/config
      - crowdsec/config
      - crowdsec/data
      - caddy/config
      - caddy/data
      - caddy/logs
      - diun/config
      - diun/data
      - scrutiny/config
      - scrutiny/influxdb
      - uptime-kuma/data
      - jellyseerr/config
      - infra/config # Placeholder
      - gluetun/config
      - radarr/config
      - sonarr/config
      - lidarr/config
      - prowlarr/config
      - homepage/config
      - changedetection/data
      - unbound/config
      - jackett/config
      - jackett/downloads
      - flaresolverr/config
      # - endlessh # No data dir typically needed
      - qbittorrent/config
      - sabnzbd/config
      # - borgmatic/config # Check compose volume strategy if enabling
      - authelia/config
      - gotify/data
      - portainer/data
      - godns/config

  tasks:
    - name: Ensure dedicated group for Podman exists
      become: yes
      ansible.builtin.group:
        name: "{{ podman_group }}"
        gid: "{{ user_pgid | default(omit) }}" # Set GID if provided
        state: present

    - name: Ensure dedicated user for Podman exists
      become: yes
      ansible.builtin.user:
        name: "{{ podman_user }}"
        group: "{{ podman_group }}"
        uid: "{{ user_puid | default(omit) }}" # Set UID if provided
        shell: /bin/bash # Or another appropriate shell
        state: present
        create_home: yes

    - name: Get actual home directory path for user
      become: yes
      ansible.builtin.user:
        name: "{{ podman_user }}"
      register: podman_user_info
      changed_when: false

    - name: Set user home directory fact (handles potential variations)
      ansible.builtin.set_fact:
        user_home_dir: "{{ podman_user_info.home }}"

    - name: Debug - show effective directories
      ansible.builtin.debug:
        msg:
          - "User home directory: {{ user_home_dir }}"
          - "Stack directory: {{ base_stack_dir }}"
          - "Data directory: {{ base_data_dir }}"

    - name: Enable linger for the Podman user
      become: yes
      ansible.builtin.command: "loginctl enable-linger {{ podman_user }}"
      changed_when: false # Command itself doesn't report change reliably
      failed_when: false # Don't fail if linger is already enabled

    - name: Ensure base directories exist in user home
      # Run as the user themselves to ensure correct ownership from the start
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ base_stack_dir }}"
        - "{{ base_data_dir }}"

    - name: Create data subdirectories for services
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.file:
        path: "{{ base_data_dir }}/{{ item }}"
        state: directory
        mode: '0775' # Allow group write if needed by containers
      loop: "{{ services_with_data_dirs }}"

    - name: Create stack subdirectories for compose files
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.file:
        path: "{{ base_stack_dir }}/{{ item }}"
        state: directory
        mode: '0755'
      loop: "{{ podman_services }}"

    # --- Template/Copy config files FIRST ---
    # Ensure destinations are under base_data_dir within user's home
    - name: Template GoDNS configuration file
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.template:
        src: "stacks/godns/config.yml.j2"
        dest: "{{ base_data_dir }}/godns/config/config.yml"
        mode: '0600'

    - name: Template GoDNS Compose file
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.template:
        src: "stacks/godns/compose.yml.j2"
        dest: "{{ base_stack_dir }}/godns/compose.yml"
        mode: '0644'

    - name: Copy Caddyfile
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.copy:
        src: "stacks/caddy/Caddyfile"
        dest: "{{ base_data_dir }}/caddy/config/Caddyfile"
        mode: '0644'
      notify: Restart Caddy Service # Handler needs become_user

    - name: Template Authelia configuration
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.template:
        src: "stacks/authelia/configuration.yml.j2"
        dest: "{{ base_data_dir }}/authelia/config/configuration.yml"
        mode: '0600'

    - name: Copy Authelia users file
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.copy:
        src: "stacks/authelia/users.yml"
        dest: "{{ base_data_dir }}/authelia/config/users.yml"
        mode: '0600'

    # - name: Template Borgmatic configuration (if used)
    #   become: yes
    #   become_user: "{{ podman_user }}"
    #   ansible.builtin.template:
    #     src: "stacks/borgmatic/config.yml.j2"
    #     dest: "{{ base_data_dir }}/borgmatic/config/config.yml" # Adjust if compose uses named volume
    #     mode: '0600'

    - name: Template Diun compose file
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.template:
        src: "stacks/diun/compose.yml.j2"
        dest: "{{ base_stack_dir }}/diun/compose.yml"
        mode: '0644'

    - name: Copy standard Compose files to target host
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.copy:
        src: "stacks/{{ item }}/compose.yml"
        dest: "{{ base_stack_dir }}/{{ item }}/compose.yml"
        mode: '0644'
      loop: "{{ podman_services | difference(['diun', 'authelia', 'godns']) }}" # Exclude templated ones

    # --- REMOVED firewalld task ---
    # Firewall rules must be managed externally or rely on Podman's default port mapping.

    # --- Generate Systemd Units ---
    # IMPORTANT: Ensure the compose files themselves use paths relative to the user's home
    # or absolute paths under the NEW base_data_dir (e.g., /var/home/alastor/podman-data/...)
    - name: Generate systemd user units for each stack
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.command: >-
        podman generate systemd --new --files --name {{ item }} {{ base_stack_dir }}/{{ item }}/compose.yml
      args:
        chdir: "{{ user_home_dir }}" # Run from user's home
        # Creates units in ~/.config/systemd/user/
        creates: "{{ user_home_dir }}/.config/systemd/user/{{ item }}.service"
      register: systemd_generate_result
      changed_when: "'Created' in systemd_generate_result.stdout"
      loop: "{{ podman_services }}"
      notify: Reload Systemd User Daemon # Handler needs become_user

  handlers:
    - name: Reload Systemd User Daemon
      listen: Reload Systemd User Daemon # Ensure listener matches notify
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.systemd:
        scope: user
        daemon_reload: yes

    - name: Restart Caddy Service
      listen: Restart Caddy Service # Ensure listener matches notify
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.systemd:
        scope: user
        name: caddy.service # Assumes generated service name matches the stack name
        state: restarted

# --- Final Play Task: Ensure services are running ---
- name: Ensure Podman services are enabled and started
  hosts: 192.168.50.182 # <-- CHANGE THIS
  gather_facts: no # Facts gathered in previous play

  vars: # Define user again or pass via inventory/extra-vars
    podman_user: "alastor" # CHANGE THIS if needed
    # Define services list again or pass via inventory/extra-vars
    podman_services:
      - jellyfin
      - stash
      - dozzle
      - crowdsec
      - caddy
      - diun
      - scrutiny
      - uptime-kuma
      - jellyseerr
      - infra
      - gluetun
      - radarr
      - sonarr
      - lidarr
      - prowlarr
      - homepage
      - changedetection
      - unbound
      - godns
      - jackett
      - flaresolverr
      - endlessh
      - qbittorrent
      - sabnzbd
      # - borgmatic
      - authelia
      - gotify
      - portainer

  tasks:
    - name: Enable and start systemd user units
      become: yes
      become_user: "{{ podman_user }}"
      ansible.builtin.systemd:
        scope: user
        name: "{{ item }}.service" # Assumes generated service name matches the stack name
        enabled: yes
        state: started
      loop: "{{ podman_services }}"

